(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{319:function(a,_,e){"use strict";e.r(_);var t=e(13),s=Object(t.a)({},(function(){var a=this,_=a._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h2",{attrs:{id:"_0-前置技巧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_0-前置技巧"}},[a._v("#")]),a._v(" 0. 前置技巧")]),a._v(" "),_("h3",{attrs:{id:"如何找到查询慢的sql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何找到查询慢的sql"}},[a._v("#")]),a._v(" 如何找到查询慢的sql？")]),a._v(" "),_("p",[a._v("除了我们日常的通过使用的情况来感知慢查询以外，可通过设置慢查询来记录查询慢的构建记录，来进行优化。")]),a._v(" "),_("p",[a._v("（1）开启慢查询（此次设置为超过10秒）")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("SET GLOBAL slow_query_log_file= 'F:\\\\mysql\\\\mysql_slow.log';\nSET GLOBAL slow_query_log=ON;\nSET GLOBAL long_query_time=10.00;\n")])])]),_("p",[a._v("（2）下载慢查询日志")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("SHOW VARIABLES;\nSHOW VARIABLES LIKE 'slow_query_log';\nSHOW VARIABLES LIKE 'long_query_time';\n")])])]),_("h3",{attrs:{id:"如何查看执行过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何查看执行过程"}},[a._v("#")]),a._v(" 如何查看执行过程")]),a._v(" "),_("p",[a._v("查看一个sql的查询过程只需要前面加explain即可")]),a._v(" "),_("p",[a._v("例如")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record WHERE create_time >= '2021-01-01';\n")])])]),_("p",[a._v("参数很多，可以慢慢理解：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("id:选择标识符，id从往小执行")])]),a._v(" "),_("li",[_("p",[a._v("select_type:表示查询的类型")])])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("(1) SIMPLE(简单SELECT，不使用UNION或子查询等)\n(2) PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)\n(3) UNION(UNION中的第二个或后面的SELECT语句)\n(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)\n(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)\n(6) SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)\n(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)\n(8) DERIVED(派生表的SELECT, FROM子句的子查询)\n(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)\n")])])]),_("ul",[_("li",[_("p",[a._v("table:输出结果集的表")])]),a._v(" "),_("li",[_("p",[a._v("partitions:匹配的分区")])]),a._v(" "),_("li",[_("p",[a._v("type:表示表的连接类型")])])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）\n")])])]),_("p",[_("em",[a._v("特别注意ALL，ALL的话全表查询，数据量大的时候效率很低很低。。。")])]),a._v(" "),_("ul",[_("li",[_("p",[a._v("possible_keys:表示查询时，可能使用的索引")])]),a._v(" "),_("li",[_("p",[a._v("key:表示实际使用的索引")])]),a._v(" "),_("li",[_("p",[a._v("key_len:索引字段的长度")])])]),a._v(" "),_("p",[_("em",[a._v("key_len是根据表定义计算而得，不损失精确性的情况下，长度越短越好")])]),a._v(" "),_("ul",[_("li",[_("p",[a._v("ref:列与索引的比较")])]),a._v(" "),_("li",[_("p",[a._v("rows:扫描出的行数(估算的行数)")])]),a._v(" "),_("li",[_("p",[a._v("filtered:按表条件过滤的行百分比")])]),a._v(" "),_("li",[_("p",[a._v("Extra:执行情况的描述和说明")])])]),a._v(" "),_("h2",{attrs:{id:"_1-加索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-加索引"}},[a._v("#")]),a._v(" 1. 加索引")]),a._v(" "),_("p",[a._v("索引就和书的目录一样，通过查看目录能够快速找到要查找内容，"),_("strong",[a._v("对于一个数据量较大的数据表来说，千万不要全表查询，一定要包含索引")]),a._v("；")]),a._v(" "),_("h3",{attrs:{id:"索引失效的场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引失效的场景"}},[a._v("#")]),a._v(" 索引失效的场景")]),a._v(" "),_("p",[a._v("其实加索引并不难，但是再表关联等的时候会出现索引失效的场景，可通过"),_("code",[a._v("EXPLAIN")]),a._v("查看执行过程，在增加了索引的情况下，"),_("code",[a._v("type")]),a._v("为"),_("code",[a._v("ALL")]),a._v("的时候则索引失效。")]),a._v(" "),_("p",[a._v("这里简单写下此次优化过程中索引失效的一些场景：")]),a._v(" "),_("p",[a._v("对于一构建记录表，包含version")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('DROP TABLE IF EXISTS `t_record_info` ;\n\nCREATE TABLE `t_record_info` (\n  `name` VARCHAR(64) NOT NULL,\n  `type` INT(2) NOT NULL,\n  `version` VARCHAR(64) NOT NULL,\n  `create_time` DATETIME NOT NULL,\n  KEY `idx_create_time` (`create_time`),\n  KEY `idx_version` (`version`)\n);\n\nINSERT INTO `t_record_info` VALUE ("a",0,"version1",\'2020-12-01\');\nINSERT INTO `t_record_info` VALUE ("b",1,"version2",\'2021-01-01\');\nINSERT INTO `t_record_info` VALUE ("b",0,"version1",\'2021-02-01\');\n')])])]),_("p",[a._v("对于一version表")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("DROP TABLE IF EXISTS `t_version`;\n\nCREATE TABLE `t_version` (\n  `version_name` VARCHAR(64) NOT NULL,\n  `depart` VARCHAR(64) NOT NULL,\n  KEY `idx_version_name` (`version_name`),\n  KEY `depart` (`depart`)\n);\n\nINSERT INTO `t_version` VALUE (\"version1\",'d1');\nINSERT INTO `t_version` VALUE (\"version2\",'d1');\nINSERT INTO `t_version` VALUE (\"version3\",'d2');\nINSERT INTO `t_version` VALUE (\"version4\",'d2');\n")])])]),_("h4",{attrs:{id:"_1-不等于-部分like-开头-开始"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-不等于-部分like-开头-开始"}},[a._v("#")]),a._v(" （1） 不等于，部分like（开头%开始）")]),a._v(" "),_("p",[a._v("尽量避免where的时候使用<> 或者 !=操作，因为mysql支持<, <=, > ,=, BETWEEN, IN等")]),a._v(" "),_("ul",[_("li",[a._v("失效的场景")])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record_info WHERE VERSION LIKE '%d%'\n")])])]),_("ul",[_("li",[a._v("OK的场景")])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record_info WHERE VERSION LIKE 'd%'\n")])])]),_("h4",{attrs:{id:"_2-in子查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-in子查询"}},[a._v("#")]),a._v(" （2）IN子查询")]),a._v(" "),_("p",[a._v("当version进行in子查询的时候")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record_info \nWHERE VERSION IN (SELECT version_name FROM t_version WHERE depart = 'd1');\n")])])]),_("p",[a._v("会发现"),_("code",[a._v("t_record_info")]),a._v("的version索引会失效，type会成"),_("code",[a._v("ALL")])]),a._v(" "),_("h5",{attrs:{id:"解决策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决策略"}},[a._v("#")]),a._v(" 解决策略")]),a._v(" "),_("p",[a._v("（1）使用exit代码")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("代码省略\n")])])]),_("p",[a._v("（2）使用关联表")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record_info AS a \nLEFT JOIN t_version AS b\nON a.`version` = b.`version_name`\nWHERE b.`depart` = 'd1';\n")])])]),_("p",[a._v("（3）使用业务代码独立（采用）")]),a._v(" "),_("p",[a._v("查询两次，第二次的时候直接使用in的")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("SELECT version_name FROM t_version WHERE depart = 'd1'\n")])])]),_("p",[a._v("业务代码先计算出version列表（也可以使用临时表进行存储），然后再查询")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("SELECT * FROM t_record_info WHERE VERSION IN ('version1','version2')\n")])])]),_("h3",{attrs:{id:"一些建议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一些建议"}},[a._v("#")]),a._v(" 一些建议")]),a._v(" "),_("p",[a._v("（1）最左匹配原则")]),a._v(" "),_("p",[a._v("尽量把最常用的字段放在最前面")]),a._v(" "),_("p",[a._v("（2）尽量把离散值较高的字段往前放")]),a._v(" "),_("p",[a._v("（3） 查询时，有的列是非等值条件，有点是等值条件，则等值条件字段放在前面")]),a._v(" "),_("h2",{attrs:{id:"_2-分页"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-分页"}},[a._v("#")]),a._v(" 2. 分页")]),a._v(" "),_("p",[a._v("CoreCD分页策略采用存储过程的方式进行分页，一次性查询1000条数据全部前台显示，如果需要更多记录点击前台进行获取第二个1000页。")]),a._v(" "),_("p",[a._v("此分页方式会有几个弊端：")]),a._v(" "),_("p",[a._v("（1）只能查看最近1000条的数据，如果超过1000条就比较麻烦；")]),a._v(" "),_("p",[a._v("（2）查询前1000条其实也相对很慢；")]),a._v(" "),_("p",[a._v("（3）无法获取最近几天构建的总数；")]),a._v(" "),_("p",[_("strong",[a._v("因此，直接通过后台分页的方式进行修改，一次只获取10条数据，获取10条数据比获取1000条效率要快很多。")])]),a._v(" "),_("p",[a._v("分页采用limit进行分页即可")]),a._v(" "),_("blockquote",[_("p",[a._v("引入的问题：获取总数会很慢，比获取1000条数据都慢。此优化可能由于计算count反而造成查询的负优化，解决措施下面会进行说明。")])]),a._v(" "),_("h2",{attrs:{id:"_3-分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-分区"}},[a._v("#")]),a._v(" 3. 分区")]),a._v(" "),_("p",[a._v("其实第一次想到的方式是分表，在一菲同学的建议下，改成了对数据表进行分区的方式。")]),a._v(" "),_("p",[a._v("什么是分区和如何分区，在这里不进行详细讨论，感兴趣的可以看另一个帖子：")]),a._v(" "),_("p",[a._v("<帖子链接>")]),a._v(" "),_("h3",{attrs:{id:"分区的坑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分区的坑"}},[a._v("#")]),a._v(" 分区的坑")]),a._v(" "),_("p",[a._v("看过一些其他的优化建议，很多人其实不建议进行分区，大多数情况都是建议直接进行分表，因此对于分区来说抱着试试的态度，踩了一些坑作为记录。")]),a._v(" "),_("h5",{attrs:{id:"_1-分区表-分区键设计不太灵活"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-分区表-分区键设计不太灵活"}},[a._v("#")]),a._v(" （1）分区表，分区键设计不太灵活")]),a._v(" "),_("p",[a._v("这个感触很深，由于构建记录通过时间进行分区，具体如下：")]),a._v(" "),_("ul",[_("li",[a._v("varchar不能作为分区键")])]),a._v(" "),_("p",[a._v("构建记录有点难受的把时间设置成了varchar类型")]),a._v(" "),_("p",[_("strong",[a._v("解决策略：把时间从varchar改为datatime")])]),a._v(" "),_("ul",[_("li",[a._v("mysql只能将主键作为分区键")])]),a._v(" "),_("p",[a._v("构建记录表中自增加id是主键，也没见把构建时间作为主键的。")]),a._v(" "),_("p",[_("strong",[a._v("解决策略：最后实在没办法，只好先把自增id取消自增，删除主键，然后把id和时间加起来作为联合主键，将id恢复自增")])]),a._v(" "),_("ul",[_("li",[a._v("不能出现其他的唯一索引")])]),a._v(" "),_("p",[_("strong",[a._v("解决策略：将唯一索引修改为普通索引")])]),a._v(" "),_("ul",[_("li",[a._v("用hash进行分区的时候，range查询的无法获取分区。")])]),a._v(" "),_("p",[a._v("有点绕，举个例子，有个t_record表，我们先通过年份进行range分区，再通过季度进行hash子分区。")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("ALTER TABLE t_record \nPARTITION BY RANGE(YEAR(create_time))\nSUBPARTITION BY HASH(QUARTER(create_time ))\nSUBPARTITIONS 4 (\n    PARTITION p2019 VALUES LESS THAN (2020),\n    PARTITION p2020 VALUES LESS THAN (2021),\n    PARTITION p2021 VALUES LESS THAN maxvalue\n);\n")])])]),_("p",[a._v("但是，按照时间范围进行查询的时候，只能获取到年份的分区，获取不到季度的子分区。本例中获取到的分区如下")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record WHERE create_time >= '2021-01-01';\n\np2021_p2021sp0,p2021_p2021sp1,p2021_p2021sp2,p2021_p2021sp3\n")])])]),_("p",[a._v("只有具体时间的时候才能获取的准确的分区")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("EXPLAIN SELECT * FROM t_record WHERE create_time = '2021-01-01';\n\np2021_p2021sp1\n")])])]),_("p",[_("strong",[a._v("解决策略：全部使用range分区")])]),a._v(" "),_("h5",{attrs:{id:"_2-跨区查询较慢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨区查询较慢"}},[a._v("#")]),a._v(" （2）跨区查询较慢")]),a._v(" "),_("p",[a._v("分区粒度按照季度，默认查询三天记录，出现跨区的情况较少")]),a._v(" "),_("h5",{attrs:{id:"_3-数据量并发量大的时候-如果在分区表实施关联-就是一个灾难"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据量并发量大的时候-如果在分区表实施关联-就是一个灾难"}},[a._v("#")]),a._v(" （3）数据量并发量大的时候，如果在分区表实施关联，就是一个灾难")]),a._v(" "),_("p",[a._v("此问题由于是构建记录，所以通过第四点反范式进行消除")]),a._v(" "),_("h2",{attrs:{id:"_4-反范式设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-反范式设计"}},[a._v("#")]),a._v(" 4. 反范式设计")]),a._v(" "),_("h4",{attrs:{id:"_1-什么是范式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是范式"}},[a._v("#")]),a._v(" （1）什么是范式？")]),a._v(" "),_("p",[a._v("对于数据库的设计，需要满足范式")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("第一范式：列不可分")])]),a._v(" "),_("li",[_("p",[a._v("第二范式：要有主键")])]),a._v(" "),_("li",[_("p",[a._v("第三范式：不可存在传递依赖")])])]),a._v(" "),_("blockquote",[_("p",[a._v("范式可以避免数据冗余，减少数据库的空间，减轻维护数据完整性的麻烦。")])]),a._v(" "),_("h4",{attrs:{id:"_2-为什么会有反范式设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么会有反范式设计"}},[a._v("#")]),a._v(" （2）为什么会有反范式设计？")]),a._v(" "),_("ul",[_("li",[a._v("提高查询效率（读多写少）")])]),a._v(" "),_("p",[a._v("对于构建系统的构建记录来说，构建记录需要频繁的被查询，且需要多条件，当如果百万级数据表和其他百万级的数据表关联时，无论如何优化，都不能大幅提升查询效率。")]),a._v(" "),_("ul",[_("li",[a._v("保存历史快照信息")])]),a._v(" "),_("p",[a._v("构建记录包括模板的名称、服务组等信息，但是这些可能在后面的过程中被修改，使用表关联进行查询（比如关联模板表）的话，一旦模板数据发生变更，历史快照就会丢失")]),a._v(" "),_("blockquote",[_("p",[a._v("反范式能够通过空间换换区时间，通过增加冗余字段提升查询效率和保存历史快照。")])]),a._v(" "),_("p",[a._v("对CoreCD构建记录来说，理论上应该进行反范式设计，查询一个表即可，但是由于历史原因，其构建记录关联了其他两个表，其中构建记录已经是百万级数据，另外关联的两个表一个也是百万级数据，一个是万级数据，随着数据量的增加，关联表造成的负担会严重加大。")]),a._v(" "),_("p",[a._v("且在分页过程中计算总数时，count命令在关联表时效率会严重下降，导致查询效率极低。")]),a._v(" "),_("p",[_("strong",[a._v("因此，将三个表的数据合成一个表，通过反范式的手段，提高查询效率。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);