(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{322:function(t,a,s){"use strict";s.r(a);var _=s(14),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-函数式编程的必要性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数式编程的必要性"}},[t._v("#")]),t._v(" 1. 函数式编程的必要性")]),t._v(" "),a("h3",{attrs:{id:"_1-1-集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-集合"}},[t._v("#")]),t._v(" 1.1 集合")]),t._v(" "),a("p",[t._v("集合对于我们来说再常见不过了。在关系型数据库查询的时候，能通过各种sql语句取出来需要的数据集（例如List"),a("Map",[t._v("类型），或通过nosql数据库进行大数据的分析（例如日志分析等等）。有时候我们能直接通过数据库的sql或者其他逻辑实现集合的查找、排序、关联、求和、分组等等。但是我们不可能全部通过sql/nosql语句进行数据处理，例如数据表要分库、数据来源是第三方数据源等等，所以很多时候，我们需要"),a("strong",[t._v("在代码层进行数据加工")]),t._v("，这样不仅能够减少数据库的压力，而且增加代码灵活性、可扩展性等等。")])],1),t._v(" "),a("p",[t._v("尽管java集合本身的能力已经相当强大，但是面对一些复杂处理，还是显得力不从心。")]),t._v(" "),a("p",[t._v("很开心的是stream优雅的做到了这一点。")]),t._v(" "),a("p",[t._v("什么是stream（流）？什么是lambda表达式？什么是函数式编程？在日常适用中如何使用？")]),t._v(" "),a("h3",{attrs:{id:"_1-2-函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-函数式编程"}},[t._v("#")]),t._v(" 1.2 函数式编程")]),t._v(" "),a("p",[t._v("函数式体现为"),a("strong",[t._v("函数为第一公民")]),t._v("的原则。面向对象编程是对"),a("strong",[t._v("数据进行抽象")]),t._v("，而函数式编程是对"),a("strong",[t._v("行为进行抽象")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("代码简洁，开发快速")]),t._v(" "),a("li",[t._v("接近自然语言，易于理解")])]),t._v(" "),a("p",[t._v("例如对两个数的相加：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(a, b) -> a + b\n")])])]),a("h3",{attrs:{id:"_1-3-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-流"}},[t._v("#")]),t._v(" 1.3 流")]),t._v(" "),a("p",[a("strong",[t._v("支持顺序和并行汇集的一系列元素")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/chenmingkong/picture-bed/raw/master/img/20220114221937.png",alt:""}})]),t._v(" "),a("p",[t._v("概念和逻辑写起来太麻烦了，懒得写了就这样吧，还是后面直接看代码吧！！！")])])}),[],!1,null,null,null);a.default=r.exports}}]);