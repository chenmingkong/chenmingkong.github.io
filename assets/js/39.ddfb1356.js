(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{310:function(_,t,v){"use strict";v.r(t);var s=v(13),l=Object(s.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-什么是范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是范式"}},[_._v("#")]),_._v(" 1. 什么是范式？")]),_._v(" "),t("p",[_._v("对于数据库的设计，需要满足范式")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("第一范式：列不可分")])]),_._v(" "),t("li",[t("p",[_._v("第二范式：要有主键")])]),_._v(" "),t("li",[t("p",[_._v("第三范式：不可存在传递依赖")])])]),_._v(" "),t("blockquote",[t("p",[_._v("范式可以避免数据冗余，减少数据库的空间，减轻维护数据完整性的麻烦。")])]),_._v(" "),t("h2",{attrs:{id:"_2-为什么会有反范式设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么会有反范式设计"}},[_._v("#")]),_._v(" 2. 为什么会有反范式设计？")]),_._v(" "),t("ul",[t("li",[_._v("提高查询效率（读多写少）")])]),_._v(" "),t("p",[_._v("对于构建系统的构建记录来说，构建记录需要频繁的被查询，且需要多条件，当如果百万级数据表和其他百万级的数据表关联时，无论如何优化，都不能大幅提升查询效率。")]),_._v(" "),t("ul",[t("li",[_._v("保存历史快照信息")])]),_._v(" "),t("p",[_._v("构建记录包括模板的名称、服务组等信息，但是这些可能在后面的过程中被修改，使用表关联进行查询（比如关联模板表）的话，一旦模板数据发生变更，历史快照就会丢失")]),_._v(" "),t("blockquote",[t("p",[_._v("反范式能够通过空间换换区时间，通过增加冗余字段提升查询效率和保存历史快照。")])]),_._v(" "),t("p",[_._v("对构建记录来说，理论上应该进行反范式设计，查询一个表即可，但是由于历史原因，其构建记录关联了其他两个表，其中构建记录已经是百万级数据，另外关联的两个表一个也是百万级数据，一个是万级数据，随着数据量的增加，关联表造成的负担会严重加大。")]),_._v(" "),t("p",[_._v("且在分页过程中计算总数时，count命令在关联表时效率会严重下降，导致查询效率极低。")]),_._v(" "),t("p",[t("strong",[_._v("因此，将三个表的数据合成一个表，通过反范式的手段，提高查询效率。")])])])}),[],!1,null,null,null);t.default=l.exports}}]);